name: Bootstrap Pages Functions
on:
  workflow_dispatch:

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create functions directory
        run: |
          mkdir -p functions/paypal
          
      - name: Create diag.js function
        run: |
          cat > functions/diag.js << 'EOF'
          export async function onRequestGet() {
              return new Response('diag ok', { headers: { 'content-type': 'text/plain' } });
          }
          EOF
          
      - name: Create paypal/notify.js function
        run: |
          cat > functions/paypal/notify.js << 'EOF'
          const CORS = {
              'access-control-allow-origin': '*',
              'access-control-allow-methods': 'GET,POST,OPTIONS',
              'access-control-allow-headers': 'content-type',
          };
          
          export async function onRequest(context) {
              const { request, env } = context;
              const method = request.method.toUpperCase();
              
              if (method === 'OPTIONS') return new Response(null, { headers: CORS });
              
              if (method === 'GET') {
                  return new Response('paypal notify GET ok', {
                      headers: { ...CORS, 'content-type': 'text/plain' },
                  });
              }
              
              if (method !== 'POST') {
                  return new Response('Method Not Allowed', { status: 405, headers: CORS });
              }
              
              let body = {};
              try { body = await request.json(); } catch {}
              
              const { session_id, order_id, capture } = body || {};
              if (!session_id || !order_id || !capture) return json({ error: 'missing_fields' }, 400);
              
              const session = await env.KV_STORE.get(`session:${session_id}`, { type: 'json' });
              if (!session) return json({ error: 'unknown_session' }, 404);
              
              const pu = capture?.purchase_units?.[0];
              const cap = pu?.payments?.captures?.[0];
              const amount = cap?.amount?.value;
              const currency = cap?.amount?.currency_code;
              const payerEmail = capture?.payer?.email_address;
              
              const job = {
                  state: 'paid',
                  order_id,
                  amount,
                  currency,
                  payer_email: payerEmail,
                  session,
                  created_at: Date.now()
              };
              
              await env.KV_STORE.put(`job:${session_id}`, JSON.stringify(job), { expirationTtl: 86400 });
              session.state = 'paid';
              await env.KV_STORE.put(`session:${session_id}`, JSON.stringify(session), { expirationTtl: 86400 });
              
              return json({ ok: true });
          }
          
          function json(obj, status=200) {
              return new Response(JSON.stringify(obj), {
                  status,
                  headers: { 'content-type': 'application/json; charset=utf-8', ...CORS },
              });
          }
          EOF
          
      - name: Commit functions
        run: |
          git config user.name "pages-agent"
          git config user.email "pages-agent@users.noreply.github.com"
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit."
          else
            git add functions/
            git commit -m "Bootstrap: create Pages Functions (diag + paypal/notify)"
            git push
          fi
          
      - name: Verify endpoints after bootstrap
        run: |
          set -e
          BASE="${{ vars.SITE_URL || 'https://autocaption-pro.pages.dev' }}"
          echo "Waiting 60 seconds for deployment..."
          sleep 60
          
          for i in $(seq 1 40); do
            D=$(curl -fsS "$BASE/diag" || true)
            N=$(curl -fsS "$BASE/paypal/notify" || true)
            echo "try $i -> /diag: $D | /paypal/notify: $N"
            if [ "$D" = "diag ok" ] && echo "$N" | grep -q "paypal notify GET ok"; then
              echo "✅ Bootstrap successful - endpoints responding!"
              exit 0
            fi
            sleep 6
          done
          echo "⚠️ Bootstrap completed but endpoints may need more time to deploy"